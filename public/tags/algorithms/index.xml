<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Algorithms on Script Adults</title>
    <link>http://localhost:1313/tags/algorithms/</link>
    <description>Recent content in Algorithms on Script Adults</description>
    <image>
      <title>Script Adults</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.128.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Dec 2024 00:16:04 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why use binary search when you can guess where it should be</title>
      <link>http://localhost:1313/blogs/computer-science/why-use-binary-search-when-you-can-guess-where-it-should-be/</link>
      <pubDate>Fri, 27 Dec 2024 23:40:23 +0800</pubDate>
      <guid>http://localhost:1313/blogs/computer-science/why-use-binary-search-when-you-can-guess-where-it-should-be/</guid>
      <description>Why ignore 50% of what we know about the data1 Everyone learnt binary search in Algo 101. It is the fastest way (among comparison based searches) to find an element in a sorted array. All you need to carry out the algorithms is the comparison between the target element and the element at the current position. It is widely applicable because it assumes so little from the data. But for many real life problems, we do often know something apart from merely the comparison between the two numbers.</description>
    </item>
  </channel>
</rss>
